name: CmdStanPy

on:
  push: 
    branches:
      - 'develop'
      - 'master'
    tags:
      - '**'
  pull_request:
jobs:
  cmdstanpy:
    name: tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]
      fail-fast: false
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check out github
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get Cmdstan Version
        id: check-cmdstan
        run: |
          echo "::set-output name=version::$(curl -s 'https://api.github.com/repos/stan-dev/cmdstan/releases/latest' | python -c 'import json,sys;obj=json.load(sys.stdin);print(obj["tag_name"])')"
        shell: bash
      - name: Cache cmdstan installation
        uses: actions/cache@v2
        with:
          path: ~/.cmdstan
          key: ${{ runner.os }}-cmdstan-${{ steps.check-cmdstan.outputs.version }}-${{ hashFiles('**/install_cmdstan.py') }}
      - name: Install dependencies (python)
        run: |
          pip install --upgrade pip wheel
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pip install codecov

      - name: Run flake8, pylint, mypy
        run: |
          flake8 cmdstanpy test
          pylint -v cmdstanpy test
          mypy cmdstanpy

      - name: Build wheel
        run: python setup.py bdist_wheel

      - name: Install wheel (Linux, macOS)
        if: matrix.os != 'windows-latest'
        run: pip install dist/*.whl

      - name: Install wheel (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $whl = Get-ChildItem -Path dist -Filter *.whl | Select-Object -First 1
          pip install "$whl"

      - name: Show libraries
        run: python -m pip freeze

      - name: Install CmdStan (Linux, macOS)
        if: matrix.os != 'windows-latest'
        run: |
          python -m cmdstanpy.install_cmdstan

      - name: Install CmdStan (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          python -m cmdstanpy.install_cmdstan --compiler

      - name: Run tests
        run: |
          mkdir run_tests
          cd run_tests
          pytest -v ../test --cov=../cmdstanpy

      - name: Run model with requirements-optional.txt
        run: |
          cd run_tests
          python -m pip install -r ../requirements-optional.txt
          python ../test/example_script.py

      - name: Submit codecov
        run: |
          cd run_tests
          codecov